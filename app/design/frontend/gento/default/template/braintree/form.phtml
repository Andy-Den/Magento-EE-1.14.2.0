<?php
$_form = $this;
$_code = $_form->getMethodCode();
$_model = Mage::getModel('braintree_payments/paymentmethod');
$_loggedIn = Mage::getSingleton('customer/session')->isLoggedIn();
$_storedCards = $this->getStoredCards();
$_useVault = $_loggedIn && $_model->useVault() && count($_storedCards);
$_autoDetection = Mage::getStoreConfig('payment/braintree/enable_cc_detection');
?>
<ul class="form-list braintree" id="payment_form_<?php echo $_code ?>" style="display:none;">
    <input type="hidden" name="payment[cc_last4]" id="<?php echo $_code ?>_cc_last4" value="" />
    <?php if ($_autoDetection) : ?>
        <input type="hidden" id="card_type_autoselect" value="" />
    <?php endif; ?>
    <?php if ($_useVault): ?>
        <li id="<?php echo $_code ?>_token_selector">
            <label for="<?php echo $_code ?>_cc_token"><?php echo $this->__('Payment Information') ?></label>
            <div class="input-box">
                <select id="<?php echo $_code ?>_cc_token" name="payment[cc_token]">
                    <?php foreach ($_storedCards as $creditCard): ?>
                        <option value="<?php echo $creditCard->token?>" <?php echo $creditCard->default ? 'selected="selected"' : '' ?>>
                            <?php echo $creditCard->maskedNumber . ' - ' . $creditCard->cardType; ?>
                        </option>
                    <?php endforeach; ?>
                        <option value=''><?php echo $this->__('Add new card') ?></option>
                </select>
            </div>
        </li>
    <?php endif; ?>
    <li class="hide_if_token_selected" id="cc_type_manual_row" <?php echo $_autoDetection ? 'style="display:none;"' : '';?>>
        <label for="<?php echo $_code ?>_cc_type" class="required"><em>*</em><?php echo $this->__('Credit Card Type') ?></label>
        <div class="input-box">
            <select id="<?php echo $_code ?>_cc_type" name="payment[cc_type]" title="<?php echo $this->__('Credit Card Type') ?>" class="required-entry">
                <option value="">--<?php echo $this->__('Please Select') ?>--</option>
            <?php $_ccType = $this->getInfoData('cc_type') ?>
            <?php foreach ($this->getCcAvailableTypes() as $_typeCode => $_typeName): ?>
                <option value="<?php echo $_typeCode ?>"<?php if($_typeCode==$_ccType): ?> selected="selected"<?php endif ?>><?php echo $_typeName ?></option>
            <?php endforeach ?>
            </select>
            <input type="hidden" name="payment[hidden][cc_type]" id="<?php echo $_code ?>_cc_type_hidden"/>
        </div>
    </li>
    <li class="hide_if_token_selected" id="cc_type_auto_row" <?php echo $_autoDetection ? '' : 'style="display:none;"';?>>
        <label>Accepted payment methods</label>
        <div class="input-box">
            <?php foreach ($this->getCcAvailableTypes() as $_typeCode => $_typeName):
                if(in_array($_typeCode,$this->getCardTypesWithImages())):?>
                    <div class="payment-type-image" id="payment-type-<?php echo $_typeCode;?>"><img src="<?php echo $this->getSkinUrl('braintree/images/'.$_typeCode.'.png');?>"/></div>
                <?php endif;?>
            <?php endforeach;?>
            <div class="clearer"></div>
        </div>
    </li>
    <li class="hide_if_token_selected">
        <label for="<?php echo $_code ?>_cc_number" class="required"><em>*</em><?php echo $this->__('Credit Card Number') ?></label>
        <div class="input-box">
            <input type="text" id="<?php echo $_code ?>_cc_number" data-encrypted-name="payment[cc_number]"  title="<?php echo $this->__('Credit Card Number') ?>" class="input-text required-entry validate-cc-number <?php echo $_autoDetection ? 'validate-cc-type-autodetect' : 'validate-cc-type'; ?>" value="" />
        </div>
    </li>
    <li class="hide_if_token_selected">
        <label for="<?php echo $_code ?>_expiration" class="required"><em>*</em><?php echo $this->__('Expiration Date') ?></label>
        <div class="input-box">
            <div class="v-fix">
                <select id="<?php echo $_code ?>_expiration" name="payment[cc_exp_month]" class="month validate-cc-exp required-entry">
                <?php $_ccExpMonth = $this->getInfoData('cc_exp_month') ?  $this->getInfoData('cc_exp_month') :
                    Mage::helper('braintree_payments')->getTodayMonth();?>
                <?php foreach ($this->getCcMonths() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>"<?php if($k==$_ccExpMonth): ?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
                </select>
                <input type="hidden" name="payment[hidden][cc_exp_month]" id="<?php echo $_code ?>_expiration_hidden"/>
            </div>
            <div class="v-fix">
                <?php $_ccExpYear = $this->getInfoData('cc_exp_year') ? $this->getInfoData('cc_exp_year') :
                    Mage::helper('braintree_payments')->getTodayYear(); ?>
                <select id="<?php echo $_code ?>_expiration_yr" name="payment[cc_exp_year]" class="year required-entry">
                <?php foreach ($this->getCcYears() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>"<?php if($k==$_ccExpYear): ?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
                </select>
                <input type="hidden" name="payment[hidden][cc_exp_year]" id="<?php echo $_code ?>_expiration_yr_hidden"/>
            </div>
        </div>
    </li>
    <?php echo $this->getChildHtml() ?>
    <?php if($this->hasVerification()): ?>
        <li class="hide_if_token_selected">
            <label for="<?php echo $_code ?>_cc_cid" class="required"><em>*</em><?php echo $this->__('Card Verification Number') ?></label>
            <div class="input-box">
                <div class="v-fix">
                    <input type="text" title="<?php echo $this->__('Card Verification Number') ?>"  class="input-text cvv required-entry <?php echo $_autoDetection ? 'validate-cc-cvn-autodetect' : 'validate-cc-cvn'; ?>" id="<?php echo $_code ?>_cc_cid" data-encrypted-name="payment[cc_cid]" value="" />
                </div>
                <a href="#" class="cvv-what-is-this"><?php echo $this->__('What is this?') ?></a>
            </div>
        </li>
    <?php endif; ?>

    <?php if($this->canSaveCard()): ?>
        <li id="<?php echo $_code ?>_store_in_vault_div" style="text-align:left;" class="hide_if_token_selected">
            <input type="checkbox" title="<?php echo $this->__('Save this card for future use') ?>" class="input-checkbox" id="<?php echo $_code ?>_store_in_vault" name="payment[store_in_vault]" value="1" />
            <label for="<?php echo $_code ?>_store_in_vault" class="required" style="float:none;"><?php echo $this->__('Save this card for future use') ?></label>
        </li>
    <?php endif; ?>
</ul>

<script type="text/javascript">
//<![CDATA[
(function() {

<?php if ($_useVault): ?>
    var selectBox = $('<?php echo $_code ?>_cc_token');
    var initToken = selectBox.getValue();

    if (initToken)
    {
        $('<?php echo $_code ?>_cc_last4').value = selectBox[selectBox.selectedIndex].text.slice(-4);
        $('<?php echo $_code ?>_cc_type').value = "";

        <?php if($_autoDetection):?>
            $('cc_type_manual_row').hide();
            $('cc_type_auto_row').show();
        <?php else:?>
            $('cc_type_manual_row').show();
            $('cc_type_auto_row').hide();
        <?php endif;?>

        $$('.hide_if_token_selected').invoke('hide');


    }

    $('<?php echo $_code ?>_cc_token').observe('change', function (e) {
        var selectBox = $(this);
        var token = selectBox.getValue();
        if (token)
        {
            $('<?php echo $_code ?>_cc_last4').value = selectBox[selectBox.selectedIndex].text.slice(-4);
            $('<?php echo $_code ?>_cc_type').value = "";
            $$('.hide_if_token_selected').invoke('hide');

            <?php if($_autoDetection):?>
                $('cc_type_manual_row').hide();
                $('cc_type_auto_row').hide();
            <?php else:?>
                $('cc_type_manual_row').hide();
                $('cc_type_auto_row').hide();
            <?php endif;?>
        }
        else
        {
            $$('.hide_if_token_selected').invoke('show');

            <?php if($_autoDetection):?>
            $('cc_type_manual_row').hide();
            $('cc_type_auto_row').show();
            <?php else:?>
            $('cc_type_manual_row').show();
            $('cc_type_auto_row').hide();
            <?php endif;?>
        }


    });
<?php endif ?>

$('<?php echo $_code ?>_cc_number').observe('change', function(){
    $('<?php echo $_code ?>_cc_last4').value = $("<?php echo $_code ?>_cc_number").value.slice(-4);
});

$('<?php echo $_code ?>_cc_type').observe('change', function(){
    $('<?php echo $_code ?>_cc_type_hidden').value = $("<?php echo $_code ?>_cc_type").value;
});

$('<?php echo $_code ?>_expiration_yr').observe('change', function(){
    $('<?php echo $_code ?>_expiration_yr_hidden').value = $("<?php echo $_code ?>_expiration_yr").value;
});

$('<?php echo $_code ?>_expiration').observe('change', function(){
    $('<?php echo $_code ?>_expiration_hidden').value = $("<?php echo $_code ?>_expiration").value;
});

var braintree = Braintree.create('<?php echo $_model->getConfigData('client_side_encryption_key') ?>');

var keepFieldEncryptedWithHidden = function(input, hidden) {
    var encryptField = function() {
        var text = input.value;
        var encrypted = braintree.encrypt(text);
        hidden.value = encrypted;
    };
    input.observe("change", encryptField);
    setTimeout(encryptField, 300);
};

var createElement = function(tagName, attrs) {
    var element, attr, value;

    element = document.createElement(tagName);

    for (attr in attrs) {
        if (attrs.hasOwnProperty(attr)) {
            value = attrs[attr];
            element.setAttribute(attr, value);
        }
    }

    return element;
};

var keepFieldEncrypted = function(input) {
    if (!input) return;
    var fieldName = input.getAttribute("data-encrypted-name");
    var hidden = createElement("input", {
        type: "hidden",
        name: fieldName,
        value: ""
    });
    input.parentNode.appendChild(hidden);
    keepFieldEncryptedWithHidden(input, hidden);
};

keepFieldEncrypted($("<?php echo $_code ?>_cc_number"));
keepFieldEncrypted($("<?php echo $_code ?>_cc_cid"));


var loggedIn = <?php echo ($_loggedIn) ? 'true' : 'false' ?>;
if ($$('#onestepcheckout-form').first() && !loggedIn)
{
    $('id_create_account').observe('change', function() {
        $('<?php echo $_code ?>_store_in_vault_div').toggle();
    });
}
else if ($('co-payment-form'))
{
    $$('.encrypted-field').each(function(element){
        element.remove();
    });
}

})();
//]]></script>

<script type="text/javascript">
<?php if ($_autoDetection): ?>
        
        var ccTypesObject = $H({
            'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$')],
            'MC': [new RegExp('^5[1-5][0-9]{14}$'), new RegExp('^[0-9]{3}$')],
            'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$')],
            'DI': [new RegExp('^6011[0-9]{12}$'), new RegExp('^[0-9]{3}$')],
            'JCB': [new RegExp('^(3[0-9]{15}|(2131|1800)[0-9]{11})$'), new RegExp('^[0-9]{3,4}$')],
            'OT': [false, new RegExp('^([0-9]{3}|[0-9]{4})?$')]
        });
        var ccTypes = ccTypesObject._object;
        
        Validation.addAllThese([
            ['validate-cc-type-autodetect', 'Credit card type is not allowed for this payment method.', function(v, elm) {
                elm.value = removeDelimiters(elm.value);
                ccNumber = elm.value;
                ccNumber = ccNumber.replace(/\D/g,''); //remove all but the digits
                for(var ccType in ccTypes) {
                    if(ccTypes.hasOwnProperty(ccType)) {
                        var ccRegex = ccTypes[ccType][0];
                        if(ccRegex && ccNumber.match(ccRegex)) {
                            var matchFound = false;
                            for(var i=0;i<ccTypeField.options.length;i++) {
                                if(ccTypeField.options[i].value == ccType) {
                                    ccTypeField.selectedIndex = i;
                                    matchFound = true;
                                    $$('.payment-type-image').each(function(element) {
                                        if(element.id == 'payment-type-'+ccType) {
                                            element.removeClassName('disabled-payment-method');
                                        } else {
                                            element.addClassName('disabled-payment-method');
                                        }
                                    });

                                    break;
                                }
                            }

                            if(!matchFound) {
                                //disable all payment methods
                                $$('.payment-type-image').each(function(element) {
                                    element.addClassName('disabled-payment-method');
                                });
                                ccType.selectedIndex = 0;
                                $('card_type_autoselect').value = '';
                            } else {
                                $('card_type_autoselect').value = ccType;
                            }
                        }
                    }
                }
				return Boolean($('card_type_autoselect').value);
			}],
            ['validate-cc-cvn-autodetect', 'Please enter a valid credit card verification number.', function(v) {
                var ccType = $('card_type_autoselect').value;
                if(ccTypes.hasOwnProperty(ccType)) {
                    var ccRegex = ccTypes[ccType][1];
                    if (!ccRegex.test(v)) {
                        return false;
                    }
                }
                return true;
			}]]);
    
        var ccNumberFieldId = 'braintree_cc_number';
        var ccTypeField = $('braintree_cc_type');
        
        Event.observe($(ccNumberFieldId),'blur',function(){
            var ccNumber = this.value;
            ccNumber = ccNumber.replace(/\D/g,''); //remove all but the digits
            for(var ccType in ccTypes) {
                if(ccTypes.hasOwnProperty(ccType)) {
                    var ccRegex = ccTypes[ccType][0];
                    if(ccRegex && ccNumber.match(ccRegex)) {
                        var matchFound = false;
                        for(var i=0;i<ccTypeField.options.length;i++) {
                            if(ccTypeField.options[i].value == ccType) {
                                ccTypeField.selectedIndex = i;
                                matchFound = true;
                                $$('.payment-type-image').each(function(element) {
                                    if(element.id == 'payment-type-'+ccType) {
                                        element.removeClassName('disabled-payment-method');
                                    } else {
                                        element.addClassName('disabled-payment-method');
                                    }
                                });

                                break;
                            }
                        }

                        if(!matchFound) {
                            //disable all payment methods
                            $$('.payment-type-image').each(function(element) {
                                element.addClassName('disabled-payment-method');
                            });
                            ccType.selectedIndex = 0;
                            $('card_type_autoselect').value = '';
                        } else {
                            $('card_type_autoselect').value = ccType;
                        }
                    }
                }
            }
        });
<?php else:?>
    Validation.creditCartTypes = $H({
        'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],
        'MC': [new RegExp('^5[1-5][0-9]{14}$'), new RegExp('^[0-9]{3}$'), true],
        'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],
        'DI': [new RegExp('^6011[0-9]{12}$'), new RegExp('^[0-9]{3}$'), true],
        'JCB': [new RegExp('^(3[0-9]{15}|(2131|1800)[0-9]{11})$'), new RegExp('^[0-9]{3,4}$'), true],
        'OT': [false, new RegExp('^([0-9]{3}|[0-9]{4})?$'), false]
    });
<?php endif;?>
</script>
